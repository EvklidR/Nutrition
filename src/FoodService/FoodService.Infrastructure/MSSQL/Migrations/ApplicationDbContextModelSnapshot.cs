// <auto-generated />
using System;
using FoodService.Infrastructure.MSSQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodService.Infrastructure.MSSQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodService.Domain.Entities.DayResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("GlassesOfWater")
                        .HasColumnType("int");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId", "Date");

                    b.ToTable("DayResults");
                });

            modelBuilder.Entity("FoodService.Domain.Entities.EatenFood", b =>
                {
                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FoodId", "MealId");

                    b.ToTable("EatenFood");

                    b.HasDiscriminator().HasValue("EatenFood");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FoodService.Domain.Entities.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("float");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<double>("Fats")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Proteins")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Food");

                    b.HasDiscriminator().HasValue("Food");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FoodService.Domain.Entities.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("FoodService.Domain.Entities.ProductOfRecipe", b =>
                {
                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("WeightInRecipe")
                        .HasColumnType("float");

                    b.HasKey("RecipeId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsOfRecipes");
                });

            modelBuilder.Entity("FoodService.Domain.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AmountOfPortions")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DishId")
                        .IsUnique();

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("FoodService.Domain.Entities.EatenDish", b =>
                {
                    b.HasBaseType("FoodService.Domain.Entities.EatenFood");

                    b.Property<int>("AmountOfPortions")
                        .HasColumnType("int");

                    b.HasIndex("MealId");

                    b.HasDiscriminator().HasValue("EatenDish");
                });

            modelBuilder.Entity("FoodService.Domain.Entities.EatenProduct", b =>
                {
                    b.HasBaseType("FoodService.Domain.Entities.EatenFood");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasIndex("MealId");

                    b.HasDiscriminator().HasValue("EatenProduct");
                });

            modelBuilder.Entity("FoodService.Domain.Entities.Dish", b =>
                {
                    b.HasBaseType("FoodService.Domain.Entities.Food");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue("Dish");
                });

            modelBuilder.Entity("FoodService.Domain.Entities.Product", b =>
                {
                    b.HasBaseType("FoodService.Domain.Entities.Food");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("FoodService.Domain.Entities.EatenFood", b =>
                {
                    b.HasOne("FoodService.Domain.Entities.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FoodService.Domain.Entities.Meal", b =>
                {
                    b.HasOne("FoodService.Domain.Entities.DayResult", null)
                        .WithMany("Meals")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodService.Domain.Entities.ProductOfRecipe", b =>
                {
                    b.HasOne("FoodService.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodService.Domain.Entities.Recipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodService.Domain.Entities.Recipe", b =>
                {
                    b.HasOne("FoodService.Domain.Entities.Dish", "Dish")
                        .WithOne("Recipe")
                        .HasForeignKey("FoodService.Domain.Entities.Recipe", "DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");
                });

            modelBuilder.Entity("FoodService.Domain.Entities.EatenDish", b =>
                {
                    b.HasOne("FoodService.Domain.Entities.Meal", null)
                        .WithMany("Dishes")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodService.Domain.Entities.EatenProduct", b =>
                {
                    b.HasOne("FoodService.Domain.Entities.Meal", null)
                        .WithMany("Products")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodService.Domain.Entities.DayResult", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("FoodService.Domain.Entities.Meal", b =>
                {
                    b.Navigation("Dishes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("FoodService.Domain.Entities.Recipe", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("FoodService.Domain.Entities.Dish", b =>
                {
                    b.Navigation("Recipe")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
